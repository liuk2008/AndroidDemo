/**
 * 判断是否有jenkins环境
 */
boolean isInJenkinsPath() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    //it's windows+
    String str = map.get("Path")
    if ((str != null) && str.contains("jenkins")) {
        return true
    } else {
        return false
    }
}

/**
 * 获取jenkins任务名
 */
def getJenkinsName() {
    def var1 = System.getenv("JOB_NAME")
    return var1
}

/**
 * 获取Jenkins Build 号
 */
def getJenkinsBuildCode() {
    def var1 = System.getenv("BUILD_NUMBER")
    return var1
}

/**
 * 获取Jenkins Git分支名
 */
def getGitBranch() {
    def var1 = System.getenv("GIT_BRANCH")
    return var1
}

/**
 * 获取Git 版本号
 */
def getGitSHA() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

/**
 * 获取Git Tag
 */
def getGitTag() {
    return 'git describe --tags'.execute([], project.rootDir).text.trim()
}

/**
 * 获取Git 提交次数
 */
def getGitCommitCount() {
    return 'git rev-list --count HEAD'.execute([], project.rootDir).text.trim()
}

/**
 * 获取编译类型
 * @return
 */
def getBuildType() {
    def var = System.getenv("BUILD_TYPE")
    return var
}

def getJavaHome() {
    def var = System.getenv("JAVA_HOME")
    return var
}

def getAndroidHome(){
    def var = System.getenv("Android")
    return var
}


/**
 * 定义几个变量，在build.gradle里面引用
 */
ext {
    isJenkinsPath = isInJenkinsPath()
    javaHome = getJavaHome()
    androidHome = getAndroidHome()
    jenkinsName = getJenkinsName()
    jenkinsRevision = getJenkinsBuildCode()
    gitBranch = getGitBranch()
    gitSHA = getGitSHA()
    gitTag = getGitTag()
    gitCommitCount = getGitCommitCount()
    buildType = getBuildType()
}

println '***************打印配置项**************'
println "#判断是否有jenkins环境 is ${isJenkinsPath}"
println "#Java_Home is ${javaHome}"
println "#Android_Home is ${androidHome}"
println "#获取jenkins任务名 is ${jenkinsName}"
println "#获取Jenkins Build 号 is ${jenkinsRevision}"
println "#获取Jenkins Git分支 is ${gitBranch}"
println "#获取Git 版本号 is ${gitSHA}"
println "#获取Git Tag is ${gitTag}"
println "#获取Git 提交次数 is ${gitCommitCount}"
println "#获取buildType类型 is ${buildType}"
println '***************打印配置项**************'
